{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","confirmed","setConfirmed","recovered","setRecovered","dead","setDead","infectedToday","setInfectedToday","setInfectedYesterday","getCoronaCases","a","axios","get","then","response","data","totals","changes","newToday","newYesterday","catch","error","console","log","getOtherData","metadata","total","useEffect","Container","style","textAlign","Grid","container","spacing","item","xs","Card","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"sUA4FeA,MAlFf,WAAgB,IAAD,EACqBC,qBADrB,mBACNC,EADM,KACKC,EADL,OAEqBF,qBAFrB,mBAENG,EAFM,KAEKC,EAFL,OAGWJ,qBAHX,mBAGNK,EAHM,KAGAC,EAHA,OAI6BN,qBAJ7B,mBAINO,EAJM,KAISC,EAJT,OAKqCR,qBALrC,mBAKaS,GALb,WAUPC,EAAc,uCAAG,sBAAAC,EAAA,sEACRC,IAAMC,IAJD,4FAKjBC,MAAK,SAAAC,GAAa,IAAD,EACeA,EAASC,KAAKC,OAAtChB,EADS,EACTA,UAAWE,EADF,EACEA,UADF,EAEiBY,EAASC,KAAKC,OAAOC,QAA/CC,EAFS,EAETA,SAAUC,EAFD,EAECA,aAEjBlB,EAAaD,GACbG,EAAaD,GACbK,EAAiBW,GACjBV,EAAqBW,MAEtBC,OAAM,SAACC,GAAD,OAAWC,QAAQC,IAAIF,MAXT,mFAAH,qDAcdG,EAAY,uCAAG,sBAAAd,EAAA,sEACNC,IAAMC,IAjBD,0EAkBjBC,MAAK,SAAAC,GAAa,IACVV,EAAQU,EAASC,KAAKU,SAAtBrB,KAEPC,EAAQD,EAAKsB,UAEdN,OAAM,SAACC,GAAD,OAAWC,QAAQC,IAAIF,MAPX,mFAAH,qDAelB,OALAM,qBAAU,WACRlB,IACAe,MACC,IAGD,kBAACI,EAAA,EAAD,CAAWC,MAAO,CAAEC,UAAW,WAC7B,+CACA,kBAACC,EAAA,EAAD,CACEC,WAAS,EAACC,QAAS,GAEnB,kBAACF,EAAA,EAAD,CACEG,MAAI,EAACC,GAAI,IAET,kBAACC,EAAA,EAAD,KACE,4BAAKpC,GACL,2DAGJ,kBAAC+B,EAAA,EAAD,CACEG,MAAI,EAACC,GAAI,IAET,kBAACC,EAAA,EAAD,KACE,4BAAKhC,GACL,+CAGJ,kBAAC2B,EAAA,EAAD,CACEG,MAAI,EAACC,GAAI,IAET,kBAACC,EAAA,EAAD,KACE,4BAAKlC,GACL,oDAGJ,kBAAC6B,EAAA,EAAD,CACEG,MAAI,EAACC,GAAI,IAET,kBAACC,EAAA,EAAD,KACE,4BAAK9B,GACL,2ECxEQ+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnC,MAAK,SAAAoC,GACJA,EAAaC,gBAEd9B,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM8B,c","file":"static/js/main.faacad8f.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { \n  Card,\n  Container,\n  Grid,\n} from '@material-ui/core';\n\nimport './App.css';\n\nfunction App() {\n  const [confirmed, setConfirmed] = useState(),\n        [recovered, setRecovered] = useState(),\n        [dead, setDead] = useState(),\n        [infectedToday, setInfectedToday] = useState(),\n        [infectedYesterday, setInfectedYesterday] = useState();\n\n  const URL_ADDRESS = 'https://redutv-api.vg.no/sports/corona-viruset/norway-table-overview?region=municipality';\n  const API_ADDRESS = 'https://www.vg.no/spesial/2020/corona-viruset/data/norway-region-data/';\n\n  const getCoronaCases = async() => {\n    return await axios.get(URL_ADDRESS)\n    .then(response => {\n      const {confirmed, recovered} = response.data.totals;\n      const {newToday, newYesterday} = response.data.totals.changes;\n\n      setConfirmed(confirmed);\n      setRecovered(recovered);\n      setInfectedToday(newToday);\n      setInfectedYesterday(newYesterday);\n    })\n    .catch((error) => console.log(error));\n  }\n\n  const getOtherData = async() => {\n    return await axios.get(API_ADDRESS)\n    .then(response => {\n      const {dead} = response.data.metadata;\n\n      setDead(dead.total);\n    })\n    .catch((error) => console.log(error));\n  }\n\n  useEffect(() => {\n    getCoronaCases();\n    getOtherData();\n  }, []);\n\n  return (\n    <Container style={{ textAlign: 'center' }}>\n      <h1>COVID-19 NORWAY</h1>\n      <Grid\n        container spacing={4}\n      >\n        <Grid\n          item xs={12}\n        >\n          <Card>\n            <h3>{confirmed}</h3>\n            <h5>Been tested and confirmed</h5>\n          </Card>\n        </Grid>\n        <Grid\n          item xs={12}\n        >\n          <Card>\n            <h3>{dead}</h3>\n            <h5>Dead in total</h5>\n          </Card>\n        </Grid>\n        <Grid\n          item xs={12}\n        >\n          <Card>\n            <h3>{recovered}</h3>\n            <h5>Recovered in total</h5>\n          </Card>\n        </Grid>\n        <Grid\n          item xs={12}\n        >\n          <Card>\n            <h3>{infectedToday}</h3>\n            <h5>New infected and confirmed cases today</h5>\n          </Card>\n        </Grid>\n      </Grid>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}