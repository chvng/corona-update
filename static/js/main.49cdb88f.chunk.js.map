{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["RenderSingleCard","title","children","string","Card","className","CardContent","Typography","variant","RenderMultiCard","firstValue","firstString","secondValue","secondString","Divider","orientation","flexItem","App","useState","confirmed","setConfirmed","dead","setDead","deadToday","setDeadToday","hospitalized","setHospitalized","infectedToday","setInfectedToday","tested","setTested","setWorld","getCoronaCases","a","axios","get","then","response","data","metadata","total","newToday","catch","error","console","log","getHospitalized","current","getTested","count","getWorldData","useEffect","Container","align","gutterBottom","style","fontWeight","maxWidth","Grid","container","spacing","direction","justify","alignItems","item","xs","md","Table","TableHead","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"gUAmBMA,G,MAAmB,SAAC,GAA+B,IAA9BC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,OAC1C,OACE,kBAACC,EAAA,EAAD,CAAMC,UAAU,cACd,kBAACC,EAAA,EAAD,KACE,yBAAKD,UAAU,oBACb,kBAACE,EAAA,EAAD,KAAaN,IAEf,yBAAKI,UAAU,sBACb,yBAAKA,UAAU,mBACb,kBAACE,EAAA,EAAD,CACEC,QAAQ,KACRH,UAAU,qCAETH,GAEH,kBAACK,EAAA,EAAD,CACEC,QAAQ,YACRH,UAAU,mCAETF,SASTM,EAAkB,SAAC,GAAiE,IAAhER,EAA+D,EAA/DA,MAAOS,EAAwD,EAAxDA,WAAYC,EAA4C,EAA5CA,YAAaC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aACrE,OACE,kBAACT,EAAA,EAAD,CAAMC,UAAU,cACd,kBAACC,EAAA,EAAD,KACE,yBAAKD,UAAU,oBACb,kBAACE,EAAA,EAAD,KAAaN,IAEf,yBAAKI,UAAU,sBACb,yBAAKA,UAAU,mBACb,kBAACE,EAAA,EAAD,CACEC,QAAQ,KACRH,UAAU,qBAETK,GAEH,kBAACH,EAAA,EAAD,CACEC,QAAQ,YACRH,UAAU,mBAETM,IAGL,kBAACG,EAAA,EAAD,CACEC,YAAY,WACZC,UAAQ,IAEV,yBAAKX,UAAU,mBACb,kBAACE,EAAA,EAAD,CACEC,QAAQ,KACRH,UAAU,qCAETO,GAEH,kBAACL,EAAA,EAAD,CACEC,QAAQ,YACRH,UAAU,mCAETQ,QA8KAI,MArKf,WAAgB,IAAD,EACqBC,qBADrB,mBACNC,EADM,KACKC,EADL,OAEWF,qBAFX,mBAENG,EAFM,KAEAC,EAFA,OAGqBJ,qBAHrB,mBAGNK,EAHM,KAGKC,EAHL,OAI2BN,qBAJ3B,mBAINO,EAJM,KAIQC,EAJR,OAK6BR,qBAL7B,mBAKNS,EALM,KAKSC,EALT,OAMeV,qBANf,mBAMNW,EANM,KAMEC,EANF,OAOaZ,mBAAS,IAPtB,mBAOCa,GAPD,WAcPC,EAAc,uCAAG,sBAAAC,EAAA,sEACRC,IAAMC,IAND,0EAOjBC,MAAK,SAAAC,GAAa,IAAD,EACYA,EAASC,KAAKC,SAASpB,UAA3CqB,EADQ,EACRA,MAAOC,EADC,EACDA,SACPpB,EAASgB,EAASC,KAAKC,SAAvBlB,KACRD,EAAaoB,GACblB,EAAQD,EAAKmB,OACbhB,EAAaH,EAAKoB,UAClBb,EAAiBa,MAElBC,OAAM,SAACC,GAAD,OAAWC,QAAQC,IAAIF,MAVT,mFAAH,qDAadG,EAAe,uCAAG,sBAAAb,EAAA,sEACTC,IAAMC,IAlBI,mDAmBtBC,MAAK,SAAAC,GAAa,IACTZ,EAAiBY,EAASC,KAAKS,QAAQP,MAAvCf,aACRC,EAAgBD,MAEjBiB,OAAM,SAACC,GAAD,OAAWC,QAAQC,IAAIF,MANR,mFAAH,qDASfK,EAAS,uCAAG,sBAAAf,EAAA,sEACHC,IAAMC,IA1BF,wDA2BhBC,MAAK,SAAAC,GAAa,IACTY,EAAUZ,EAASC,KAAKS,QAAxBE,MACRnB,EAAUmB,MAEXP,OAAM,SAACC,GAAD,OAAWC,QAAQC,IAAIF,MANd,mFAAH,qDASTO,EAAY,uCAAG,sBAAAjB,EAAA,sEACNC,IAAMC,IAlCH,2DAmCfC,MAAK,SAAAC,GAAa,IACTC,EAASD,EAASC,KAAlBA,KACRP,EAASO,MAEVI,OAAM,SAACC,GAAD,OAAWC,QAAQC,IAAIF,MANX,mFAAH,qDAkDlB,OAzCAQ,qBAAU,WACRnB,IACAc,IACAE,IACAE,MACC,IAqCD,kBAACE,EAAA,EAAD,KACE,kBAACA,EAAA,EAAD,CACE/C,UAAU,SAEV,kBAACE,EAAA,EAAD,CACEC,QAAQ,KACR6C,MAAM,SACNC,cAAY,EACZC,MAAO,CAACC,WAAY,SAJtB,sBAUF,kBAACJ,EAAA,EAAD,CAAWK,SAAS,MAClB,kBAACC,EAAA,EAAD,CACEC,WAAS,EACTC,QAAS,EACTC,UAAU,MACVC,QAAQ,aACRC,WAAW,UAEX,kBAACL,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,kBAAC,EAAD,CACEjE,MAAM,kBACNS,WAAYiB,EACZhB,YAAY,YACZC,YAAaO,EACbN,aAAa,WAGjB,kBAAC6C,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,kBAAC,EAAD,CACEjE,MAAM,OACNS,WAAYa,EACZZ,YAAY,YACZC,YAAaS,EACbR,aAAa,WAGjB,kBAAC6C,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,kBAAC,EAAD,CACEjE,MAAM,eACNC,SAAUuB,EACVtB,OAAO,eAGX,kBAACuD,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,kBAAC,EAAD,CACEjE,MAAM,SACNC,SAAU2B,EACV1B,OAAO,gBAMf,kBAACiD,EAAA,EAAD,CAAW/C,UAAU,eACnB,kBAAC8D,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,UC5OUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5C,MAAK,SAAA6C,GACJA,EAAaC,gBAEdxC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMwC,c","file":"static/js/main.49cdb88f.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nimport Card from '@material-ui/core/Card'\nimport CardContent from '@material-ui/core/CardContent';\nimport Container from '@material-ui/core/Container';\nimport Divider from '@material-ui/core/Divider';\nimport Grid from '@material-ui/core/Grid'\nimport Table from '@material-ui/core/Table'\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport Typography from '@material-ui/core/Typography';\n\nimport './App.css';\n\nconst RenderSingleCard = ({title, children, string}) => {\n  return (\n    <Card className=\"covid-card\">\n      <CardContent>\n        <div className=\"covid-card-title\">\n          <Typography>{title}</Typography>\n        </div>\n        <div className=\"covid-card-content\">\n          <div className=\"covid-card-item\">\n            <Typography\n              variant=\"h5\"\n              className=\"covid-card-number covid-card--red\"\n            >\n              {children}\n            </Typography>\n            <Typography\n              variant=\"subtitle2\"\n              className=\"covid-card-text covid-card--red\"\n            >\n              {string}\n    </Typography>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n\nconst RenderMultiCard = ({title, firstValue, firstString, secondValue, secondString}) => {\n  return (\n    <Card className=\"covid-card\">\n      <CardContent>\n        <div className=\"covid-card-title\">\n          <Typography>{title}</Typography>\n        </div>\n        <div className=\"covid-card-content\">\n          <div className=\"covid-card-item\">\n            <Typography\n              variant=\"h5\"\n              className=\"covid-card-number\"\n            >\n              {firstValue}\n            </Typography>\n            <Typography\n              variant=\"subtitle2\"\n              className=\"covid-card-text\"\n            >\n              {firstString}\n            </Typography>\n          </div>\n          <Divider\n            orientation=\"vertical\"\n            flexItem\n          />\n          <div className=\"covid-card-item\">\n            <Typography\n              variant=\"h5\"\n              className=\"covid-card-number covid-card--red\"\n            >\n              {secondValue}\n            </Typography>\n            <Typography\n              variant=\"subtitle2\"\n              className=\"covid-card-text covid-card--red\"\n            >\n              {secondString}\n            </Typography>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n\nfunction App() {\n  const [confirmed, setConfirmed] = useState(),\n        [dead, setDead] = useState(),\n        [deadToday, setDeadToday] = useState(),\n        [hospitalized, setHospitalized] = useState(),\n        [infectedToday, setInfectedToday] = useState(),\n        [tested, setTested] = useState(),\n        [world, setWorld] = useState([]);\n\n  const URL_ADDRESS = 'https://www.vg.no/spesial/2020/corona-viruset/data/norway-region-data/';\n  const URL_HOSPITALIZED = 'https://redutv-api.vg.no/corona/v1/hospitalized';\n  const URL_TESTED = 'https://redutv-api.vg.no/corona/v1/sheets/fhi/tested';\n  const URL_WORLD = 'https://redutv-api.vg.no/corona/v1/sheets/world/reports';\n\n  const getCoronaCases = async() => {\n    return await axios.get(URL_ADDRESS)\n    .then(response => {\n      const { total, newToday } = response.data.metadata.confirmed;\n      const { dead } = response.data.metadata;\n      setConfirmed(total);\n      setDead(dead.total);\n      setDeadToday(dead.newToday);\n      setInfectedToday(newToday);\n    })\n    .catch((error) => console.log(error));\n  }\n\n  const getHospitalized = async() => {\n    return await axios.get(URL_HOSPITALIZED)\n    .then(response => {\n      const { hospitalized } = response.data.current.total;\n      setHospitalized(hospitalized);\n    })\n    .catch((error) => console.log(error));\n  }\n\n  const getTested = async() => {\n    return await axios.get(URL_TESTED)\n    .then(response => {\n      const { count } = response.data.current;\n      setTested(count);\n    })\n    .catch((error) => console.log(error));\n  }\n\n  const getWorldData = async() => {\n    return await axios.get(URL_WORLD)\n    .then(response => {\n      const { data } = response.data;\n      setWorld(data);\n    })\n    .catch((error) => console.log(error));\n  }\n\n  useEffect(() => {\n    getCoronaCases();\n    getHospitalized();\n    getTested();\n    getWorldData();\n  }, []);\n\n  const descendingComparator = (a, b, orderBy) => {\n    if (b[orderBy] < a[orderBy]) {\n      return -1;\n    }\n    if(b[orderBy] > a[orderBy]) {\n      return 1;\n    }\n    return 0;\n  }\n\n  const getComparator = (order, orderBy) => {\n    return order === 'desc'\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy);\n  }\n\n  const stableSort = (array, comparator) => {\n    const stabilizedThis = array.map((el, index) => [el, index]);\n    stabilizedThis.sort((a, b) => {\n      const order = comparator(a[0], b[0]);\n      if (order !== 0) return order;\n      return a[1] - b[1];\n    });\n    return stabilizedThis.map(el => el[0]);\n  }\n\n  const headCells = [\n    { id: 'countryNorwegian', numeric: false, disablePadding: true, label: 'Countries'},\n    { id: '', numeric: false, disablePadding: false, label: 'Coronavirus cases'},\n    { id: '', numeric: false, disablePadding: false, label: 'Per 100K citizens'},\n    { id: '', numeric: false, disablePadding: false, label: 'Deaths'},\n    { id: '', numeric: false, disablePadding: false, label: 'Recovered'},\n  ]\n\n  return (\n    <Container>\n      <Container\n        className=\"title\"\n      >        \n        <Typography\n          variant=\"h1\"\n          align=\"center\"\n          gutterBottom\n          style={{fontWeight: \"bold\"}}\n        >\n          COVID-19 OUTBREAK\n      </Typography>\n      </Container>\n\n      <Container maxWidth=\"md\">\n        <Grid\n          container \n          spacing={3}\n          direction=\"row\"\n          justify=\"flex-start\"\n          alignItems=\"center\"\n        >\n          <Grid item xs={12} md={3}>\n            <RenderMultiCard \n              title=\"Confirmed cases\"\n              firstValue={infectedToday} \n              firstString=\"NEW TODAY\"\n              secondValue={confirmed} \n              secondString=\"TOTAL\"\n            />\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <RenderMultiCard\n              title=\"Dead\"\n              firstValue={deadToday}\n              firstString=\"NEW TODAY\"\n              secondValue={dead}\n              secondString=\"TOTAL\"\n            />\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <RenderSingleCard \n              title=\"Hospitalized\"\n              children={hospitalized} \n              string=\"AS OF NOW\" \n            />\n          </Grid>\n          <Grid item xs={12} md={3}>\n            <RenderSingleCard \n              title=\"Tested\"\n              children={tested}\n              string=\"Per 21/3\"\n            />\n          </Grid>\n        </Grid>\n      </Container>\n\n      <Container className=\"covid-world\">\n        <Table>\n          <TableHead>\n\n          </TableHead>\n        </Table>\n      </Container>\n\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}